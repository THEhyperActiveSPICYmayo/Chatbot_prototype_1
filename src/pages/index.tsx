import Head from 'next/head'
    import { useState, useEffect } from 'react';
    import { v4 as uuidv4 } from 'uuid';
    import Snowfall from '../components/Snowfall';

    const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    export default function Home() {
      const [message, setMessage] = useState('');
      const [chatLog, setChatLog] = useState< { role: string, content: string }[]>([]);
      const [loading, setLoading] = useState(false);
      const [sessionId, setSessionId] = useState('');

      useEffect(() => {
        const storedSessionId = localStorage.getItem('sessionId');
        if (storedSessionId) {
          setSessionId(storedSessionId);
        } else {
          const newSessionId = uuidv4();
          setSessionId(newSessionId);
          localStorage.setItem('sessionId', newSessionId);
        }
      }, []);


      const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!message.trim()) return;

        const userMessage = { role: 'user', content: message };
        setChatLog(prev => [...prev, userMessage]);
        setLoading(true);

        try {
          const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message }),
          });

          if (!response.ok) {
             const errorData = await response.json();
            throw new Error(`HTTP error! status: ${response.status}, details: ${errorData.error}`);
          }

          const data = await response.json();
          let assistantMessage = '';
          let newChatLog = [...chatLog, userMessage];
          for (let i = 0; i < data.text.length; i++) {
            assistantMessage += data.text[i];
            newChatLog = [...newChatLog.slice(0, newChatLog.length -1), { role: 'assistant', content: assistantMessage }];
            setChatLog(newChatLog);
            await sleep(Math.random() * 20 + 10);
          }
          newChatLog = [...newChatLog.slice(0, newChatLog.length -1), { role: 'assistant', content: assistantMessage }];
          setChatLog(newChatLog);
        } catch (error: any) {
          console.error("Failed to send message:", error);
          setChatLog(prev => [...prev, { role: 'error', content: `Failed to send message. ${error.message}` }]);
        } finally {
          setLoading(false);
          setMessage('');
        }
      };


      return (
        <>
          <Head>
            <title>LLM Chatbot</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="relative flex flex-col items-center justify-center min-h-screen bg-primary-dark text-text-color font-sans overflow-hidden">
            <Snowfall />
            <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
              <div className="absolute w-24 h-24 bg-accent-color opacity-20 rounded-full -top-10 -left-10 animate-float"></div>
              <div className="absolute w-16 h-16 bg-purple-500 opacity-30 rounded-full top-20 right-20 animate-float"></div>
              <div className="absolute w-32 h-32 bg-blue-400 opacity-10 rounded-full bottom-40 left-40 animate-float"></div>
              <div className="absolute w-20 h-20 bg-green-300 opacity-20 rounded-full bottom-10 right-10 animate-float"></div>
            </div>
            <div className="w-full max-w-2xl p-6  rounded-lg shadow-md shadow-custom relative z-10" style={{ backgroundColor: 'rgba(45, 55, 72, 0.8)' }}>
              <h1 className="text-3xl font-bold mb-6 text-center text-accent-color">LLM Chatbot</h1>
              <div className="space-y-4">
                {chatLog.map((msg, index) => (
                  <div key={index} className={`chat ${msg.role === 'user' ? 'chat-end' : 'chat-start'}`}>
                    <div className="chat-bubble" style={{ backgroundColor: msg.role === 'user' ? '#4a5568' : '#2f855a', color: msg.role === 'error' ? 'red' : 'white' }}>
                      {msg.content}
                    </div>
                  </div>
                ))}
                {loading && <div className="text-center">Loading...</div>}
              </div>
              <form onSubmit={handleSubmit} className="mt-6 flex">
                <input
                  type="text"
                  placeholder="Type your message here..."
                  className="input input-bordered w-full mr-2 bg-gray-700 text-white"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                />
                <button type="submit" className="btn btn-primary bg-accent-color border-none hover:bg-indigo-500">Send</button>
              </form>
            </div>
          </main>
        </>
      )
    }
